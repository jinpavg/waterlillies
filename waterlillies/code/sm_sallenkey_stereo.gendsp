{
	"patcher" : 	{
		"fileversion" : 1,
		"appversion" : 		{
			"major" : 7,
			"minor" : 3,
			"revision" : 1,
			"architecture" : "x64",
			"modernui" : 1
		}
,
		"rect" : [ 359.0, 59.0, 899.0, 688.0 ],
		"bgcolor" : [ 0.9, 0.9, 0.9, 1.0 ],
		"editing_bgcolor" : [ 0.9, 0.9, 0.9, 1.0 ],
		"bglocked" : 0,
		"openinpresentation" : 0,
		"default_fontsize" : 10.0,
		"default_fontface" : 0,
		"default_fontname" : "Arial Bold",
		"gridonopen" : 2,
		"gridsize" : [ 15.0, 15.0 ],
		"gridsnaponopen" : 1,
		"objectsnaponopen" : 1,
		"statusbarvisible" : 2,
		"toolbarvisible" : 1,
		"lefttoolbarpinned" : 2,
		"toptoolbarpinned" : 2,
		"righttoolbarpinned" : 2,
		"bottomtoolbarpinned" : 1,
		"toolbars_unpinned_last_save" : 7,
		"tallnewobj" : 0,
		"boxanimatetime" : 200,
		"enablehscroll" : 1,
		"enablevscroll" : 1,
		"devicewidth" : 0.0,
		"description" : "",
		"digest" : "",
		"tags" : "",
		"style" : "",
		"subpatcher_template" : "<none>",
		"boxes" : [ 			{
				"box" : 				{
					"fontface" : 0,
					"fontname" : "Arial Bold",
					"fontsize" : 10.0,
					"id" : "obj-13",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 773.0, 17.0, 100.0, 20.0 ],
					"style" : "",
					"text" : "in 5 resonance 0..1"
				}

			}
, 			{
				"box" : 				{
					"fontface" : 0,
					"fontname" : "Arial Bold",
					"fontsize" : 10.0,
					"id" : "obj-10",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 587.25, 17.0, 128.0, 20.0 ],
					"style" : "",
					"text" : "in 4 cutoff right / nothing"
				}

			}
, 			{
				"box" : 				{
					"fontface" : 0,
					"fontname" : "Arial Bold",
					"fontsize" : 10.0,
					"id" : "obj-7",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 401.5, 17.0, 106.0, 20.0 ],
					"style" : "",
					"text" : "in 3 cutoff left / both"
				}

			}
, 			{
				"box" : 				{
					"fontface" : 0,
					"fontname" : "Arial Bold",
					"fontsize" : 10.0,
					"id" : "obj-5",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 773.0, 645.0, 104.0, 20.0 ],
					"style" : "",
					"text" : "out 2 right / nothing"
				}

			}
, 			{
				"box" : 				{
					"fontface" : 0,
					"fontname" : "Arial Bold",
					"fontsize" : 10.0,
					"id" : "obj-1",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 30.0, 17.0, 81.0, 20.0 ],
					"style" : "",
					"text" : "in 1 left / mono"
				}

			}
, 			{
				"box" : 				{
					"fontface" : 0,
					"fontname" : "Arial Bold",
					"fontsize" : 10.0,
					"id" : "obj-2",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 215.75, 17.0, 98.0, 20.0 ],
					"style" : "",
					"text" : "in 2 right / nothing"
				}

			}
, 			{
				"box" : 				{
					"fontface" : 0,
					"fontname" : "Arial Bold",
					"fontsize" : 10.0,
					"id" : "obj-4",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 30.0, 645.0, 88.0, 20.0 ],
					"style" : "",
					"text" : "out 1 left / mono"
				}

			}
, 			{
				"box" : 				{
					"code" : "/*\nfor sm_sallenkey_stereo filter abstraction\nSurreal Machines, 2015\n*/\r\n\r\n//\t//\t//\tcustom functions\r\n\r\nrequire(\"sm_sallenkey_functions\");\r\n\r\n//\t//\t//\tdeclarations\r\n\r\n//\tdefaults:\r\n//\t\t- stereo signal chain (L/R)\r\n//\t\t- mono modulation (inlet 2 only)\r\n//\t\t- 20ms smoothing on cutoff inlets, 10ms smoothing on resonance inlet\r\n//\t\t- 12dB lowpass nonlinear sallen & key filter\r\n//\t\t- 4x oversampled sine shaping nonlinearity post filter\r\n\r\n// choose cutoff inputs in Hz (0) or pitch (1, default)\r\nParam\t cutoffmode(1, min=0, max=1);\r\n// cutoff & resonance smooth times in ms; if == 0 then no cpu used\r\n// for smoothing and inputs can be signal rate modulators (e.g. lfos)\r\nParam\t cutoffsmooth(20, min=0, max=1000);\t\t// default 20 ms\r\nParam\t resonancesmooth(10, min=0, max=1000);\t// default 10 ms\r\n// mono cutoff modulation or seperate left/right ?\r\nParam\t modulation(0, min=0, max=1);\t\t\t// mod mono (0) or stereo (1)\r\n\r\n// mono/stereo only uses required cpu\r\nParam\t stereo(1, min=0, max=1);\t\t\t\t// mono (0) or stereo (1) operation\r\n// slope 12/24 only uses required cpu\r\nParam\t slope(0, min=0, max=1);\t\t\t\t// 12dB (0) or 24dB (1) filter slope\r\n// (0) = bypass entire filter section & do not use the cpu\r\nParam\t filter(1, min=0, max=3);\t\t\t\t// choose lowpass (1), bandpass (2), highpass (3)\r\n// nonlinearity choice only uses required cpu\r\nParam\t nonlinear(1, min=0, max=1);\t\t\t// nonlinear (tanh) filters (1), pure linear filter sections (0)\r\n\r\n// (oversampled) nonlinearity is pre filter (0) or post filter (1) ?\r\nParam\t order(1, min=0, max=1);\r\n// for final nonlinearity\r\nParam\t drive(0, min=0, max=1);\t\t\t\t// % 0..1 (0 does not mean none !)\r\n// (0) = bypass entire nonlinearity section & do not use the cpu\r\nParam\t oversampling(2, min=0, max=2);\t\t\t// 1x (1) or 4x (2) oversampling for final nonlinearity\r\n\r\n//\t//\t//\tsetup\r\n\r\ncfm\t\t = int(cutoffmode);\r\nmod\t\t = int(modulation);\r\n\r\nms\t\t = int(stereo);\r\nslp\t\t = int(slope);\r\natten\t = expsmooth((1 / (slp + 2)), 0.015111);\r\nfilt\t = int(filter);\r\nft\t\t = maximum(filt, 1);\r\nnl\t\t = int(nonlinear);\r\n\r\n// clip and scale at param rate 0..1 = pi/10..pi, then smooth\r\ndrs\t\t = ((drive * 0.9) + 0.1) * pi;\t\t// could easily be greater (e.g. (...) * 10)\r\ndrv\t\t = logsmooth(drs, 0.022666);\r\nover\t = int(oversampling);\r\nord\t\t = int(order);\r\n\r\n//\t//\t//\tinputs\r\n\r\nxL\t\t = in1;\r\nxR\t\t = in2;\t\t\t\t\t\t\t\t\t// xR only used if 'stereo == 1'\r\n\r\ncfL\t\t = in3;\r\ncfR\t\t = in4;\t\t\t\t\t\t\t\t\t// cutoffR only used if 'stereo == 1'\r\n\r\nres\t\t = in5;\r\n\r\n//\t//\t//\tK scale\r\n\r\nK\t\t \t= clip(res, 0, 1) * 2;\r\n\r\nkitten\t\t= 1;\t\t\t\t\t\t\t\t// must be '1' if unused\r\nif ((K > 1) && (drive >= 0.5)) {\r\n\r\n\tkitten\t= (((clip(drive, 0.5, 1) - 0.5) * 0.1997) * ((slp * 0.92) + 1.07)) + ((over != 2) * 0.07053);\r\n\tkitten\t= 1 - (kitten * kitten);\r\n\r\n}\r\n\r\nyL, yR\t = 0;\r\n\r\nif (filt > 0) {\t\t\t\t\t\t\t\t\t// if entire filter chain not bypassed\r\n\r\n//\t//\t//\tparse modulation\r\n\r\nif (cfm > 0) {\t\t\t\t\t\t\t\t\t// if midi pitch input chosen for 'cutoff's\r\n\tcfL\t = mtofApprox(cfL);\r\n}\r\ncfLmod\t = clip(cfL, 10, (samplerate / 2.25));\t// clip at hz level\r\n\r\n// optional smoothing (turn off for modulated inputs)\r\ncs\t\t\t= 0;\r\nif (cutoffsmooth > 0) {\r\n\tcs\t\t= cutoffsmooth * 0.001;\t\t\t\t// ..secs\r\n\tcfLmod\t= logsmooth(cfLmod, cs);\r\n}\r\n\r\nif (resonancesmooth > 0) {\r\n\trs\t\t= resonancesmooth * 0.001;\t\t\t// ...secs\r\n\tK\t\t= interp((clip(K, 1, 2) - 1), K, (K * kitten), mode=\"linear\");\t// mode=\"cosine\"\r\n\tK\t\t= expsmooth(K * 0.95, rs);\r\n} else {\r\n\tkitten\t= expsmooth(kitten, 0.015111);\r\n\tK\t\t= interp((clip(K, 1, 2) - 1), K, (K * kitten), mode=\"linear\");\t// mode=\"cosine\"\r\n\tK\t\t= K * 0.95;\r\n}\r\n\r\n//\t//\t//\tprocessing\r\n\r\noverpre\t\t = ((over == 0) || (ord == 1)) ? 0 : over;\r\nxL\t\t\t = rsinNonlin(xL, drv, overpre);\t// only processes pre filter if (ord == 0) ...\r\nif (ms > 0) {\r\n\txR\t\t = rsinNonlin(xR, drv, overpre);\t// ...\r\n}\r\n\r\na1_L, a2_L, a3_L, a4_L, a5_L\t\t\t\t\t= skfTanCoef(cfLmod, K);\r\n\r\nif (ms > 0) {\t\t\t\t\t\t\t\t\t// if signal chain stereo\r\n\r\n\tcfRmod\t\t\t= 0;\r\n\tif (mod > 0) {\t\t\t\t\t\t\t\t// if modulation stereo\r\n\r\n\t\tif (cfm > 0) {\t\t\t\t\t\t\t// if midi pitch input chosen for 'cutoff's\r\n\t\t\tcfR\t \t= mtofApprox(cfR);\r\n\t\t}\r\n\t\tcfRmod\t \t= clip(cfR, 10, (samplerate / 2.25));// clip at hz level\r\n\r\n\t\t// optional smoothing (turn off for modulated inputs)\r\n\t\tif (cutoffsmooth > 0) {\r\n\t\t\tcfRmod\t= logsmooth(cfRmod, cs);\r\n\t\t}\r\n\r\n\t} else {\t\t\t\t\t\t\t\t\t// if modulation mono\r\n\r\n\t\tcfRmod\t \t= cfLmod;\r\n\r\n\t}\r\n\r\n\ta1_R, a2_R, a3_R, a4_R, a5_R\t\t\t\t= skfTanCoef(cfRmod, K);\r\n\r\n\tif (slp >= 0) {\r\n\t\tyL\t = skfTanNlto((xL * sqrt1_2), a1_L, a2_L, a3_L, a4_L, a5_L, K, nl, ft);\r\n\t\tyR\t = skfTanNlto((xR * sqrt1_2), a1_R, a2_R, a3_R, a4_R, a5_R, K, nl, ft);\r\n\t}\r\n\t// this is wrong, we should really recompute the coefficients for second filter in the\r\n\t// cascade, but trying to save cpu here; cheap and chearful K-mul (K * sqrt1_2) ?\r\n\tif (slp >= 1) {\r\n\t\tyL\t = skfTanNlto((yL * sqrt1_2), a1_L, a2_L, a3_L, a4_L, a5_L, K, nl, ft);\r\n\t\tyR\t = skfTanNlto((yR * sqrt1_2), a1_R, a2_R, a3_R, a4_R, a5_R, K, nl, ft);\r\n\t}\r\n\r\n\tyL\t\t = yL * atten;\r\n\tyR\t\t = yR * atten;\r\n\r\n} else {\t\t\t\t\t\t\t\t\t\t// if signal chain mono\r\n\r\n\tif (slp >= 0) {\r\n\t\tyL\t = skfTanNlto((xL * sqrt1_2), a1_L, a2_L, a3_L, a4_L, a5_L, K, nl, ft);\r\n\t}\r\n\t// this is wrong, we should really recompute the coefficients for second filter in the\r\n\t// cascade, but trying to save cpu here; cheap and chearful K-mul (K * sqrt1_2) ?\r\n\tif (slp >= 1) {\r\n\t\tyL\t = skfTanNlto((yL * sqrt1_2), a1_L, a2_L, a3_L, a4_L, a5_L, K, nl, ft);\r\n\t}\r\n\r\n\tyL\t\t = yL * atten;\r\n\r\n}\r\n\r\n} else {\t\t\t\t\t\t\t\t\t\t// if entire filter chain is bypassed\r\n\r\nyL\t\t\t = xL;\r\nyR\t\t\t = xR * ms;\t\t\t\t\t\t\t// pass if stereo\r\n\r\n}\r\n\r\noverpost\t = ((over == 0) || (ord == 0)) ? 0 : over;\r\nyL\t\t\t = rsinNonlin(yL, drv, overpost);\t// only processes post filter if (ord == 1)\r\n\r\nif (ms > 0) {\r\n\tyR\t \t = rsinNonlin(yR, drv, overpost);\t// ...\r\n}\r\n\r\n//\t//\t//\toutput\r\n\r\nout1, out2\t = yL, yR;\r\n",
					"fontface" : 0,
					"fontname" : "Arial Bold",
					"fontsize" : 10.0,
					"id" : "obj-3",
					"maxclass" : "codebox",
					"numinlets" : 5,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 30.0, 54.0, 762.0, 572.0 ],
					"style" : ""
				}

			}
 ],
		"lines" : [ 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 0 ],
					"disabled" : 0,
					"hidden" : 0,
					"source" : [ "obj-1", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 3 ],
					"disabled" : 0,
					"hidden" : 0,
					"source" : [ "obj-10", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 4 ],
					"disabled" : 0,
					"hidden" : 0,
					"source" : [ "obj-13", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 1 ],
					"disabled" : 0,
					"hidden" : 0,
					"source" : [ "obj-2", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-4", 0 ],
					"disabled" : 0,
					"hidden" : 0,
					"source" : [ "obj-3", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-5", 0 ],
					"disabled" : 0,
					"hidden" : 0,
					"source" : [ "obj-3", 1 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 2 ],
					"disabled" : 0,
					"hidden" : 0,
					"source" : [ "obj-7", 0 ]
				}

			}
 ]
	}

}
